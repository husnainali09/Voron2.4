######################### PRINT START / END #########################

[gcode_macro PRINT_START]
#variable_parameter_PRINT_MIN : 0,0
#variable_parameter_PRINT_MAX : 0,0
gcode:
    # Parameters
    {% set hotendtemp = params.EXTRUDER|int %}

    CLEAR_PAUSE
    STATUS_HOMING
	G28 X Y
    STATUS_READY
    STATUS_CALIBRATING_Z
    LED_CALIBRATING_Z
    G28 Z                            ; home all axes
    STATUS_READY
    SAVE_GCODE_STATE NAME=STATE_PRINT_START
#   SET_LED_EFFECT EFFECT=bed_effects
#   G4 P500
    LED_HEATING
    M104 S150                      ; set and wait for hotend temp
#   M190 S{bedtemp}                ; set and wait for bed temp
#   G28 Z
    LED_STANDBY
    STATUS_READY
#   configure_extruder
#   BedsFansSlow
#	M107						   ; Fan off
	BED_MESH_CLEAR				   ; Clear Bed Mesh
    LED_STANDBY
    STATUS_LEVELING
    LED_LEVELLING
    QUAD_GANTRY_LEVEL
    LED_STANDBY
    STATUS_READY
	G90 													 											; absolute positioning
	G0 Z10
    STATUS_MESHING
    BED_MESH_CALIBRATE ADAPTIVE=1
    CARTOGRAPHER_TOUCH                ; Perform touch probe
    STATUS_READY
    STATUS_HEATING
    LED_HEATING
	M109 S{hotendtemp}             ; set and wait for hotend temp
    STATUS_READY
    LED_PRINTING
    STATUS_PRINTING
    LINE_PURGE
#    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
    
    RESTORE_GCODE_STATE NAME=STATE_PRINT_START
#   SKEW_PROFILE LOAD= my_skew_profile
   

[gcode_macro PRINT_END]
gcode:
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
# SET_SKEW CLEAR=1
  
  ##### Get Boundaries #####
  {% set max_x = printer.toolhead.axis_maximum.x|float %}
  {% set max_y = printer.toolhead.axis_maximum.y|float %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_x = printer.toolhead.position.x|float %}
  {% set act_y = printer.toolhead.position.y|float %}
  {% set act_z = printer.toolhead.position.z|float %}

  ##### Calculate safe stringing removal move #####
  {% if act_x < (max_x - 20.0) %}
    {% set x_safe = 20.0 %}
  {% else %}
    {% set x_safe = -20.0 %}
  {% endif %}
  {% if act_y < (max_y - 20.0) %}
    {% set y_safe = 20.0 %}
  {% else %}
    {% set y_safe = -20.0 %}
  {% endif %}
  {% if act_z < (max_z - 2.0) %}
    {% set z_safe = 2.0 %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  
  ##### end of definitions #####
#  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
  M400                                     ; wait for buffer to clear
  G92 E0                                   ; zero the extruder
  M83                                      ; relative extrusion
  G1 E-2 F3600                           ; retract filament
  G91                                      ; relative positioning
  G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
  TURN_OFF_HEATERS                         ; turn off heaters
  M107                                     ; turn off fan
  G1 Z2 F3000                              ; move nozzle up 2mm
  G90                                      ; absolute positioning
  PARKREAR
  M107
  STATUS_READY
  BED_MESH_CLEAR
  LED_STANDBY
  
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END
  TOGGLE_NEVERMORE
  filter_off
  

######################### PAUSE/RESUME/CANCEL #########################

######################### PAUSE/RESUME/CANCEL #########################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	# Parameters
	{% set z = params.Z|default(10)|int %}																					; z hop amount
	
	{% if printer.pause_resume.is_paused|lower == 'false' %}
        {action_respond_info("DEBUG: PAUSE macro inside if statement")}    
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}									    				    ; set z hop variable for reference in resume macro
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer.extruder.target}  									; set hotend temp variable for reference in resume macro
								
#		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0																	; disable filament sensor		
		BASE_PAUSE																											; pause print
		{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}										; check that zhop doesn't exceed z max
			G91																												; relative positioning
			G1 Z{z} F900																									; raise Z up by z hop amount
		{% else %}
			{ action_respond_info("Pause zhop exceeds maximum Z height.") }													; if z max is exceeded, show message and set zhop value for resume to 0
			SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
		{% endif %}
		G90																													; absolute positioning
		G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500; park toolhead at front center
		G92 E0                                                                             ; zero the extruder
        M83                                                                                ; relative extrusion
        G1 E-2 F3600                                                                       ; retract filament
        SAVE_GCODE_STATE NAME=PAUSEPARK																						; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)	
		M104 S0																												; turn off hotend
		SET_IDLE_TIMEOUT TIMEOUT=43200															    						; set timeout to 12 hours
	{% endif %}

# Return Z hop back down 10mm, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
	# Parameters
	{% set e = params.E|default(2.5)|float %}
	
	{% if printer.pause_resume.is_paused|lower == 'true' %}
        {action_respond_info("DEBUG: RESUME macro inside if statement")}
#		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1																	; enable filament sensor
		RESETRGB																											; reset LCD color
		SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}											; set timeout back to configured value
		{% if etemp > 0 %}
			M109 S{etemp|int}																								; wait for hotend to heat back up
		{% endif %}
		RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450															; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)	
		G91																													; relative positioning
		M83																													; relative extruder positioning
		{% if printer.extruder.can_extrude|lower == 'false' %}												
			G1 Z{zhop * -1} E{e} F900																						; prime nozzle by E, lower Z back down
		{% else %}						
			G1 Z{zhop * -1} F900																							; lower Z back down	without priming (just in case we are testing the macro with cold hotend)
		{% endif %}
        G92 E0                                   ; zero the extruder
        M83                                      ; relative extrusion
        G1 E1.975 F3600                          ; Extrude filament
		BASE_RESUME VELOCITY=450																							; resume print
	{% endif %}

# Filament runout / change alias	
#[gcode_macro M600]
#gcode:
#	LCDRGB R=0 G=1 B=0	# Turn LCD green
#	PAUSE
	
# Disable filament sensor 1 sec after startup, only enable during prints (in PRINT_START/PRINT_END)

[delayed_gcode DISABLEFILAMENTSENSOR]	
initial_duration: 1
gcode:
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

######################### FLUIDD WEB MACROS #########################

# These are specified as macros just so they show up in Fluidd/Mainsail.

[gcode_macro SETPA]
gcode:
	# Parameters
	{% set pa = params.PA|default(0)|float %}

	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro SETPASMOOTH]
gcode:
	# Parameters
	{% set smooth = params.SMOOTH|default(0)|float %}
	
	SET_PRESSURE_ADVANCE SMOOTH_TIME={smooth}

######################### LED #########################



######################### MISC #########################

[gcode_macro RESETSPEEDS]
gcode:
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

[gcode_macro G32]
gcode:
    LED_HOMING
	G28 XY
	BED_MESH_CLEAR
	G28 Z
	QUAD_GANTRY_LEVEL
	G28 Z
    LED_STANDBY
    
[gcode_macro HEATSOAK]
gcode:
	# Parameters
    STATUS_HEATING
	{% set t = params.T|default(100)|int %}
	{% set move = params.MOVE|default(1)|int %}

	M140 S{t}										; heat bed
	{% if t >= 100 %}
		M106 S255									; turn on part fan (80%)
	{% else %}
		M106 S0 									; turn part fan off
	{% endif %}
	{% if move == 1 %}
		CG28										; conditional home
		PARKBED						 			; move to bed
	{% endif %}

######################### LCD RGB CONTROLS #########################

# Set LCD RGB at startup
#[delayed_gcode SETDISPLAYNEOPIXEL]
#initial_duration: 1
#gcode:
#	RESETRGB
	
# Default RGB
#[gcode_macro RESETRGB]
#gcode:
#	SET_LED LED=lcd RED=1 GREEN=0.45 BLUE=0.4 INDEX=1 TRANSMIT=0
#	SET_LED LED=lcd RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=2 TRANSMIT=0
#	SET_LED LED=lcd RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=3

# Example LCDRGB R=1 G=0 B=0
#[gcode_macro LCDRGB]
#gcode:
#	{% set r = params.R|default(1)|int %}
#	{% set g = params.G|default(1)|int %}
#	{% set b = params.B|default(1)|int %}
#
#	SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=1 TRANSMIT=0
#	SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=2 TRANSMIT=0
#	SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=3

######################### FILAMENT #########################

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  25
variable_slow_load_distance: 50
variable_purge_distance:  35
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{slow_load_distance} F{speed}
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  5
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state
    
######################### CONDITIONAL HOMING #########################

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
		G28
	{% endif %}
	
# Conditional G28 (home if not already homed)
[gcode_macro XYCG28]
gcode:
	{% if "xy" not in printer.toolhead.homed_axes %}
		G28 X Y
	{% endif %}

[gcode_macro ZCG28]
gcode:
	{% if "z" not in printer.toolhead.homed_axes %}
		G28 Z
	{% endif %}

######################### PARKING #########################

# Park front center
[gcode_macro PARKFRONT]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500		
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500										
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park top rear left
[gcode_macro PARKREAR]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKREAR
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_minimum.x+150} Y{printer.toolhead.axis_maximum.y-30} Z{printer.toolhead.axis_maximum.z-100} F19500		
	RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER
	
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKBED
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500										
	RESTORE_GCODE_STATE NAME=PARKBED

######################### ALIASES/SHORTCUTS #########################


# Convert Marlin linear advance commands to SET_PRESSURE_ADVANCE.
# Used in conjunction with Marlin's linear advance calibration tool: https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set k = params.K|default(0)|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={k}

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
	M84												; turn steppers off
    TURN_OFF_HEATERS								; turn bed / hotend off
    M107                         	   			 	; turn print cooling fan off
	SET_PIN PIN=Case_LED_Left VALUE=0				; turn light off
    SET_PIN PIN=Case_LED_Right VALUE=0				; turn light off

[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: BASE_QUAD_GANTRY_LEVEL
gcode:
    #G28 # or use a conditional or safe homing
    _CG28 # my if then sensorless homing
    BASE_QUAD_GANTRY_LEVEL horizontal_move_z=10 retry_tolerance=1.000
    BASE_QUAD_GANTRY_LEVEL horizontal_move_z=3
    G28 Z

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state